// Generated by CoffeeScript 1.6.2
(function() {
  this.FBService = (function() {
    function FBService() {
      this.type = null;
      this.url = null;
      this.nextUrl = null;
    }

    FBService.prototype.setType = function(type) {
      this.type = type;
    };

    FBService.prototype.setUrl = function(url) {
      return this.url = $.trim(url);
    };

    FBService.prototype.getUrl = function() {
      return this.url;
    };

    FBService.prototype.getItemUrl = function() {
      if (this.type === 'page') {
        return this._url + '/posts';
      } else if (this.type === 'group') {
        return this._url + '/feed';
      }
    };

    FBService.prototype.getNextItemUrl = function() {
      if (this.nextUrl) {
        return this.nextUrl;
      } else {
        if (this.type === 'page') {
          return this.url + '/posts';
        } else if (this.type === 'group') {
          return this.url + '/feed';
        }
      }
    };

    FBService.prototype.getPage = function(callback) {
      var err, page,
        _this = this;

      err = null;
      page = null;
      if (this.getUrl()) {
        return FB.api(this.getItemUrl(), function(response) {
          if (response.error) {
            switch (response.error.code) {
              case 803:
                err = "invalid";
                break;
              default:
                err = "private";
            }
            return callback(err, page);
          } else {
            return FB.api(_this.getUrl(), function(response) {
              if (response.error) {
                switch (response.error.code) {
                  case 803:
                    err = "invalid";
                    break;
                  case 104:
                    err = "private";
                }
                return callback(err, page);
              } else {
                page = response;
                return callback(err, page);
              }
            });
          }
        });
      }
    };

    FBService.prototype.getItems = function(callback) {
      var err, items,
        _this = this;

      err = null;
      items = [];
      return FB.api(this.getNextItemUrl(), function(response) {
        if (response.error) {
          switch (response.error.code) {
            case 803:
              err = "invalid";
              break;
            default:
              err = "private";
          }
          return callback(err, items);
        } else {
          if (response.paging) {
            _this.nextUrl = response.paging.next;
          }
          items = response.data;
          return callback(err, items);
        }
      });
    };

    FBService.prototype.clear = function() {
      this.type = null;
      this.url = null;
      return this.nextUrl = null;
    };

    return FBService;

  })();

}).call(this);
