// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  this.PlayerAbstract = (function() {
    function PlayerAbstract() {}

    PlayerAbstract.prototype.element = function(element) {
      throw new Error("element(element): Unimplemented");
    };

    PlayerAbstract.prototype.load = function(url) {
      throw new Error("load(url): Unimplemented");
    };

    PlayerAbstract.prototype.play = function() {
      throw new Error("play(): Unimplemented");
    };

    PlayerAbstract.prototype.pause = function() {
      throw new Error("pause(): Unimplemented");
    };

    PlayerAbstract.prototype.stop = function() {
      throw new Error("stop(): Unimplemented");
    };

    PlayerAbstract.prototype.on = function(event, callback) {
      throw new Error("on(event, callback): Unimplemented");
    };

    PlayerAbstract.prototype.destroy = function() {
      throw new Error("destroy(): Unimplemented");
    };

    return PlayerAbstract;

  })();

  this.Queue = (function() {
    function Queue() {
      this.songs = [];
      this.player = null;
      this.index = 0;
      this.playing = false;
    }

    Queue.prototype.add = function(song) {
      console.log("add");
      this.songs.push(song);
      if (this.songs.length === 1) {
        this.playing = true;
        return this.loadAndPlay();
      }
    };

    Queue.prototype.remove = function(index) {
      console.log("remove");
      console.log(index);
      return this.songs.splice(index, 1);
    };

    Queue.prototype.play = function(index) {
      console.log("play");
      if (this.player) {
        this.player.play();
        return this.playing = true;
      }
    };

    Queue.prototype.pause = function() {
      console.log("pause");
      if (this.player) {
        this.player.pause();
        return this.playing = false;
      }
    };

    Queue.prototype.stop = function() {
      console.log("stop");
      if (this.player) {
        this.player.stop();
        return this.playing = false;
      }
    };

    Queue.prototype.prev = function() {
      console.log("prev");
      if (this.index - 1 >= 0) {
        this.index--;
        return this.loadAndPlay();
      }
    };

    Queue.prototype.next = function() {
      console.log("next");
      if (this.index + 1 < this.songs.length) {
        this.index++;
        return this.loadAndPlay();
      }
    };

    Queue.prototype.load = function() {
      var song,
        _this = this;

      if (this.player) {
        if ((song = this.songs[this.index])) {
          return this.player.load(song.link, function() {
            _this.player.finish(function() {
              return _this.next();
            });
          });
        }
      }
    };

    Queue.prototype.loadAndPlay = function() {
      var song,
        _this = this;

      if (this.player) {
        if ((song = this.songs[this.index])) {
          return this.player.load(song.link, function() {
            _this.player.finish(function() {
              return _this.next();
            });
            if (_this.isPlaying()) {
              return _this.play();
            }
          });
        }
      }
    };

    Queue.prototype.isPlaying = function() {
      return this.playing;
    };

    return Queue;

  })();

  this.UrlParser = (function() {
    function UrlParser(url) {
      this.url = url;
      this.type = this.url.indexOf('soundcloud') !== -1 ? 'soundcloud' : this.type;
      this.type = this.url.indexOf('youtube') !== -1 ? 'youtube' : this.type;
      if (this.type === 'soundcloud') {
        this.id = this.url;
      }
      if (this.type === 'youtube') {
        this.id = this.url.split('?v=').pop();
      }
    }

    return UrlParser;

  })();

  this.Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      _ref = Player.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Player.Events = {
      READY: 'ready'
    };

    Player.prototype.element = function(id) {
      this.id = id;
    };

    Player.prototype.load = function(url, callback) {
      url = new UrlParser(url);
      if (this._player) {
        this._player.destroy();
      }
      if (url.type === 'soundcloud') {
        this._player = new PlayerSoundcloud();
        this._player.element(this.id);
        this._player.load(url.id, callback);
      }
      if (url.type === 'youtube') {
        this._player = new PlayerYoutube();
        this._player.element(this.id);
        return this._player.load(url.id, callback);
      }
    };

    Player.prototype.finish = function(callback) {
      if (this._player) {
        return this._player.finish(callback);
      }
    };

    Player.prototype.play = function() {
      if (this._player) {
        return this._player.play();
      }
    };

    Player.prototype.pause = function() {
      if (this._player) {
        return this._player.pause();
      }
    };

    Player.prototype.stop = function() {
      if (this._player) {
        return this._player.stop();
      }
    };

    return Player;

  })(this.PlayerAbstract);

  this.onYouTubeIframeAPIReady = function() {
    if (_this.Player.ready) {
      return _this.Player.ready();
    }
  };

}).call(this);
