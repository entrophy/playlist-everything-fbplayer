// Generated by CoffeeScript 1.6.2
(function() {
  var safeMap;

  safeMap = function(data, callback) {
    var item, _i, _len, _results;

    if (_.isArray(data)) {
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        _results.push(callback(item));
      }
      return _results;
    } else {
      return callback(data);
    }
  };

  this.SongService = (function() {
    function SongService() {
      this.songs = [];
      this.songs_by_id = {};
      this.callbacks = [];
    }

    SongService.prototype.exists = function(song) {
      return this.songs_by_id[song.id];
    };

    SongService.prototype.add = function(data) {
      var callback, item, song, _i, _j, _len, _len1, _ref, _results, _results1;

      if (_.isArray(data)) {
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          _results.push(this.add(item));
        }
        return _results;
      } else {
        song = new window.Song(data);
        if (song.playable && !this.exists(song)) {
          this.songs_by_id[song.id] = song;
          this.songs.push(song);
          _ref = this.callbacks['add'] || [];
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            callback = _ref[_j];
            _results1.push(callback.call(this, song));
          }
          return _results1;
        }
      }
    };

    SongService.prototype.clear = function() {
      this.songs.length = [];
      return this.songs_by_id = {};
    };

    SongService.prototype.on = function(event, callback) {
      return (this.callbacks[event] = this.callbacks[event] || []).push(callback);
    };

    SongService.prototype.all = function() {
      return this.songs;
    };

    return SongService;

  })();

}).call(this);
